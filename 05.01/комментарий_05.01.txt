  ====================  легенда  ====================

Верно      — всё хорошо и комментариев не требует
Замечания  — в целом верно, но можно лучше / комментарии
Ошибки     — что-то или всё пошло не так
Неверно    — условие задачи неверно интерпретировано
Нет ответа — файл с решением задачи отсутствует



  =====================  задачи  ====================

1.1. Верно

1.2. Верно

1.3. Замечания: 
        а) функция ord() и так возвращает объект int

1.4. Ошибки: 
        а) неверно сформулировано условие: проверьте, например, ход с а1 на с3
        подсказка: ключ в том, что именно на одну клетку перемещаеся; может пригодиться встроенная функция abs()

2.1. Верно

2.2. Замечания: 
        а) сколько раз используется переменная i?
        б) когда переменная цикла не нужна, то вместо имени переменной пишем _
        в) не стоит в теле цикла перезаписывать переменную цикла
        г) здесь уместно использовать оператор расширенного присваивания +=

2.3. Замечания: 
        а) избыточный перебор: могут ли быть делителями n числа больше n // 2?
        б) здесь уместно использовать оператор расширенного присваивания +=

2.4. Замечания: 
        а) не оптимально: вложенный цикл здесь не нужен
        б) сколько раз используются переменные n и m?

2.5. Неверно:
        а) мы не знаем, сколько итераций произойдёт в цикле
     Замечания: 
        а) переменным лучше давать непротиворечивые имена: num1 – это похоже на имя переменной, содержащей int, а не str
        здесь больше подошло бы s, seq, all_nums и т.п.

2.6. Замечания: 
        а) а не проще вместо print(i, '',sep = ' ', end = '') использовать print(i, end=' ') ?

2.7. Замечания: 
        а) сколько раз используются переменные i и j?
        б) здесь уместно использовать оператор расширенного присваивания:
        
            sum1 += int(input())

2.8. Нет ответа



Изучить таблицу приоритета операторов:
https://docs.python.org/3/reference/expressions.html#operator-precedence



  =====================  баллы  =====================

1.1. 
1.2. 
1.3. 
1.4. 
2.1. 
2.2. 
2.3. 
2.4. 
2.5. 
2.6. 
2.7. 
2.8. 